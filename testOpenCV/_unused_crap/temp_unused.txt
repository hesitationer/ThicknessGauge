// Rudy Alex Kohn

cv::Mat ThicknessGauge::dilation(cv::Mat& input, int dilation, int size) const {
	cv::MorphShapes dilation_type;
	if (dilation == 0)
		dilation_type = cv::MORPH_RECT;
	else if (dilation == 1)
		dilation_type = cv::MORPH_CROSS;
	else if (dilation == 2)
		dilation_type = cv::MORPH_ELLIPSE;
	else
		dilation_type = cv::MORPH_RECT;

	auto element = getStructuringElement(dilation_type, cv::Size(2 * size + 1, 2 * size + 1), cv::Point(size, size));
	cv::Mat dilation_dst = cv::Mat::zeros(input.size(), input.type());

	dilate(input, dilation_dst, element);
	return dilation_dst;
}

[[deprecated("Not viable in the current setup.")]]
void ThicknessGauge::GenerateInputQuad(cv::Mat* image, cv::Point2f* quad) {
	// The 4 points that select quadilateral on the input , from top-left in clockwise order
	// These four pts are the sides of the rect box used as input
	quad[0] = cv::Point2f(0.0f, 0.0f);
	quad[1] = cv::Point2f(static_cast<float>(image->cols), 0.0f);
	quad[2] = cv::Point2f(static_cast<float>(image->cols), static_cast<float>(image->rows));
	quad[3] = cv::Point2f(0.0f, static_cast<float>(image->rows));
}

[[deprecated("Not viable in the current setup.")]]
void ThicknessGauge::GenerateOutputQuad(cv::Mat* image, cv::Point2f* quad) {
	// The 4 points where the mapping is to be done , from top-left in clockwise order
	quad[0] = cv::Point2f(-image->cols / 2.0f, 0.0f);
	quad[1] = cv::Point2f(static_cast<float>(image->cols) + image->cols / 2.0f, 0.0f);
	quad[2] = cv::Point2f(static_cast<float>(image->cols), static_cast<float>(image->rows));
	quad[3] = cv::Point2f(0.0f, static_cast<float>(image->rows));
}

[[deprecated("Not viable in the current setup.")]]
void ThicknessGauge::FitQuad(cv::Mat* image, cv::Point2f* inputQuad, cv::Point2f* outputQuad) const {
	// calculate transformation
	cv::Matx33f M = getPerspectiveTransform(inputQuad, outputQuad);

	// calculate warped position of all corners
	auto a = M.inv() * cv::Point3f(0.0f, 0.0f, 1.0f);
	auto b = M.inv() * cv::Point3f(0.0f, static_cast<float>(image->rows), 1.0f);
	auto c = M.inv() * cv::Point3f(static_cast<float>(image->cols), static_cast<float>(image->rows), 1.0f);
	auto d = M.inv() * cv::Point3f(static_cast<float>(image->cols), 0.0f, 1.0f);

	a *= (1.0f / a.z);
	b *= (1.0f / b.z);
	c *= (1.0f / c.z);
	d *= (1.0f / d.z);

	// to make sure all corners are in the image, every position must be > (0, 0)
	auto x = ceil(abs(min(min(a.x, b.x), min(c.x, d.x))));
	auto y = ceil(abs(min(min(a.y, b.y), min(c.y, d.y))));

	// and also < (width, height)
	auto width = ceil(abs(max(max(a.x, b.x), max(c.x, d.x)))) + x;
	auto height = ceil(abs(max(max(a.y, b.y), max(c.y, d.y)))) + y;

	// adjust target points accordingly
	for (auto i = 0; i < 4; i++)
		inputQuad[i] += cv::Point2f(x, y);

	// recalculate transformation
	M = getPerspectiveTransform(inputQuad, outputQuad);

	// get result
	cv::Mat result;
	warpPerspective(*image, result, M, cv::Size(static_cast<int>(width), static_cast<int>(height)), cv::WARP_INVERSE_MAP);

	imshow("quadfit", result);

	cv::waitKey(3);
}

[[deprecated("Flagged for deletion.")]]
void ThicknessGauge::WarpImage(cv::Mat* input, cv::Mat* output) {
}

[[deprecated("Flagged for deletion.")]]
void ThicknessGauge::WarpMeSomeCookies(cv::Mat* image, cv::Mat* output) {
	vector<cv::Point2f> points2D;
	points2D.push_back(cv::Point2f(0, 0));
	points2D.push_back(cv::Point2f(50, 0));
	points2D.push_back(cv::Point2f(50, 50));
	points2D.push_back(cv::Point2f(0, 50));

	//cv::Mat perspectiveMat = cv::getPerspectiveTransform(points2D, *image);
	//cv::warpPerspective(*_image, *_undistortedImage, M, cv::Size(_image->cols, _image->rows));
}

cv::Mat ThicknessGauge::cornerHarris_test(cv::Mat& image, int threshold) const {

	cv::Mat dst_norm, dst_norm_scaled;
	cv::Mat dst = cv::Mat::zeros(image.size(), CV_32FC1);

	/// Detector parameters
	auto blockSize = 2;
	auto apertureSize = 3;
	auto k = 0.04;

	/// Detecting corners
	cornerHarris(image, dst, blockSize, apertureSize, k, cv::BORDER_DEFAULT);

	/// Normalizing
	normalize(dst, dst_norm, 0, 255, cv::NORM_MINMAX, CV_32FC1, cv::Mat());
	convertScaleAbs(dst_norm, dst_norm_scaled);

	/// Drawing a circle around corners
	for (auto j = 0; j < dst_norm.rows; j++) {
		for (auto i = 0; i < dst_norm.cols; i++) {
			if (static_cast<int>(dst_norm.at<float>(j, i)) > threshold)
				circle(dst_norm_scaled, cv::Point(i, j), 5, cv::Scalar(0), 2, 8, 0);
		}
	}
	return dst_norm_scaled;
}
