/*=============================================================================
This file was generated by the VimbaClassGenerator
=============================================================================*/

#include "GC2450MCamera.h"

GC2450MCamera::GC2450MCamera(
	const char* pCameraID,
	const char* pCameraName,
	const char* pCameraModel,
	const char* pCameraSerialNumber,
	const char* pInterfaceID,
	VmbInterfaceType interfaceType,
	const char* pInterfaceName,
	const char* pInterfaceSerialNumber,
	VmbAccessModeType interfacePermittedAccess
)
	: Camera(
		pCameraID,
		pCameraName,
		pCameraModel,
		pCameraSerialNumber,
		pInterfaceID,
		interfaceType) {
}


// Category /Acquisition
VmbErrorType GC2450MCamera::AcquisitionAbort() {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionAbortFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetAcquisitionAbortFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_AcquisitionAbortFeature.get() == nullptr) {
		VmbErrorType result = GetFeatureByName("AcquisitionAbort", m_AcquisitionAbortFeature);
		if (result != VmbErrorSuccess) {
			m_AcquisitionAbortFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionAbortFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetAcquisitionFrameCount(VmbInt64_t& value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionFrameCountFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetAcquisitionFrameCount(VmbInt64_t value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionFrameCountFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetAcquisitionFrameCountFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_AcquisitionFrameCountFeature.get() == nullptr) {
		VmbErrorType result = GetFeatureByName("AcquisitionFrameCount", m_AcquisitionFrameCountFeature);
		if (result != VmbErrorSuccess) {
			m_AcquisitionFrameCountFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionFrameCountFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetAcquisitionFrameRateAbs(double& value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionFrameRateAbsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetAcquisitionFrameRateAbs(double value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionFrameRateAbsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetAcquisitionFrameRateAbsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_AcquisitionFrameRateAbsFeature.get() == nullptr) {
		VmbErrorType result = GetFeatureByName("AcquisitionFrameRateAbs", m_AcquisitionFrameRateAbsFeature);
		if (result != VmbErrorSuccess) {
			m_AcquisitionFrameRateAbsFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionFrameRateAbsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetAcquisitionFrameRateLimit(double& value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionFrameRateLimitFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetAcquisitionFrameRateLimitFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_AcquisitionFrameRateLimitFeature.get() == nullptr) {
		VmbErrorType result = GetFeatureByName("AcquisitionFrameRateLimit", m_AcquisitionFrameRateLimitFeature);
		if (result != VmbErrorSuccess) {
			m_AcquisitionFrameRateLimitFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionFrameRateLimitFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetAcquisitionMode(AcquisitionModeEnum& value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = static_cast<AcquisitionModeEnum>(nValue);
	return result;
}

VmbErrorType GC2450MCamera::SetAcquisitionMode(AcquisitionModeEnum value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetAcquisitionModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_AcquisitionModeFeature.get() == nullptr) {
		VmbErrorType result = GetFeatureByName("AcquisitionMode", m_AcquisitionModeFeature);
		if (result != VmbErrorSuccess) {
			m_AcquisitionModeFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::AcquisitionStart() {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionStartFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetAcquisitionStartFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_AcquisitionStartFeature.get() == nullptr) {
		VmbErrorType result = GetFeatureByName("AcquisitionStart", m_AcquisitionStartFeature);
		if (result != VmbErrorSuccess) {
			m_AcquisitionStartFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionStartFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::AcquisitionStop() {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetAcquisitionStopFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetAcquisitionStopFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_AcquisitionStopFeature.get() == nullptr) {
		auto result = GetFeatureByName("AcquisitionStop", m_AcquisitionStopFeature);
		if (result != VmbErrorSuccess) {
			m_AcquisitionStopFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionStopFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetRecorderPreEventCount(VmbInt64_t& value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	auto result = GetRecorderPreEventCountFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetRecorderPreEventCount(VmbInt64_t value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	auto result = GetRecorderPreEventCountFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetRecorderPreEventCountFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_RecorderPreEventCountFeature.get() == nullptr) {
		auto result = GetFeatureByName("RecorderPreEventCount", m_RecorderPreEventCountFeature);
		if (result != VmbErrorSuccess) {
			m_RecorderPreEventCountFeature.reset();
			return result;
		}
	}
	feature = m_RecorderPreEventCountFeature;
	return VmbErrorSuccess;
}


// Category /Acquisition/Trigger
VmbErrorType GC2450MCamera::GetTriggerActivation(TriggerActivationEnum& value) {
	AVT::VmbAPI::FeaturePtr pFeature;
	VmbErrorType result = GetTriggerActivationFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = static_cast<TriggerActivationEnum>(nValue);
	return result;
}

VmbErrorType GC2450MCamera::SetTriggerActivation(TriggerActivationEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerActivationFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetTriggerActivationFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_TriggerActivationFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("TriggerActivation", m_TriggerActivationFeature);
		if (result != VmbErrorSuccess) {
			m_TriggerActivationFeature.reset();
			return result;
		}
	}
	feature = m_TriggerActivationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetTriggerDelayAbs(double& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerDelayAbsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetTriggerDelayAbs(double value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerDelayAbsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetTriggerDelayAbsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_TriggerDelayAbsFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("TriggerDelayAbs", m_TriggerDelayAbsFeature);
		if (result != VmbErrorSuccess) {
			m_TriggerDelayAbsFeature.reset();
			return result;
		}
	}
	feature = m_TriggerDelayAbsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetTriggerMode(TriggerModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (TriggerModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetTriggerMode(TriggerModeEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetTriggerModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_TriggerModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("TriggerMode", m_TriggerModeFeature);
		if (result != VmbErrorSuccess) {
			m_TriggerModeFeature.reset();
			return result;
		}
	}
	feature = m_TriggerModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetTriggerOverlap(TriggerOverlapEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerOverlapFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (TriggerOverlapEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetTriggerOverlap(TriggerOverlapEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerOverlapFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetTriggerOverlapFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_TriggerOverlapFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("TriggerOverlap", m_TriggerOverlapFeature);
		if (result != VmbErrorSuccess) {
			m_TriggerOverlapFeature.reset();
			return result;
		}
	}
	feature = m_TriggerOverlapFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetTriggerSelector(TriggerSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (TriggerSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetTriggerSelector(TriggerSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetTriggerSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_TriggerSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("TriggerSelector", m_TriggerSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_TriggerSelectorFeature.reset();
			return result;
		}
	}
	feature = m_TriggerSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::TriggerSoftware() {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerSoftwareFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetTriggerSoftwareFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_TriggerSoftwareFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("TriggerSoftware", m_TriggerSoftwareFeature);
		if (result != VmbErrorSuccess) {
			m_TriggerSoftwareFeature.reset();
			return result;
		}
	}
	feature = m_TriggerSoftwareFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetTriggerSource(TriggerSourceEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerSourceFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (TriggerSourceEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetTriggerSource(TriggerSourceEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerSourceFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetTriggerSourceFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_TriggerSourceFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("TriggerSource", m_TriggerSourceFeature);
		if (result != VmbErrorSuccess) {
			m_TriggerSourceFeature.reset();
			return result;
		}
	}
	feature = m_TriggerSourceFeature;
	return VmbErrorSuccess;
}


// Category /BufferHandlingControl
VmbErrorType GC2450MCamera::GetStreamAnnounceBufferMinimum(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamAnnounceBufferMinimumFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamAnnounceBufferMinimumFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamAnnounceBufferMinimumFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamAnnounceBufferMinimum", m_StreamAnnounceBufferMinimumFeature);
		if (result != VmbErrorSuccess) {
			m_StreamAnnounceBufferMinimumFeature.reset();
			return result;
		}
	}
	feature = m_StreamAnnounceBufferMinimumFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStreamAnnouncedBufferCount(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamAnnouncedBufferCountFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamAnnouncedBufferCountFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamAnnouncedBufferCountFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamAnnouncedBufferCount", m_StreamAnnouncedBufferCountFeature);
		if (result != VmbErrorSuccess) {
			m_StreamAnnouncedBufferCountFeature.reset();
			return result;
		}
	}
	feature = m_StreamAnnouncedBufferCountFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStreamBufferHandlingMode(StreamBufferHandlingModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamBufferHandlingModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (StreamBufferHandlingModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetStreamBufferHandlingMode(StreamBufferHandlingModeEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamBufferHandlingModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamBufferHandlingModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamBufferHandlingModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamBufferHandlingMode", m_StreamBufferHandlingModeFeature);
		if (result != VmbErrorSuccess) {
			m_StreamBufferHandlingModeFeature.reset();
			return result;
		}
	}
	feature = m_StreamBufferHandlingModeFeature;
	return VmbErrorSuccess;
}


// Category /Controls/BlackLevelControl
VmbErrorType GC2450MCamera::GetBlackLevelSelector(BlackLevelSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBlackLevelSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (BlackLevelSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetBlackLevelSelector(BlackLevelSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBlackLevelSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetBlackLevelSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_BlackLevelSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("BlackLevelSelector", m_BlackLevelSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_BlackLevelSelectorFeature.reset();
			return result;
		}
	}
	feature = m_BlackLevelSelectorFeature;
	return VmbErrorSuccess;
}


// Category /Controls/DSPSubregion
VmbErrorType GC2450MCamera::GetDSPSubregionBottom(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionBottomFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetDSPSubregionBottom(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionBottomFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDSPSubregionBottomFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DSPSubregionBottomFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DSPSubregionBottom", m_DSPSubregionBottomFeature);
		if (result != VmbErrorSuccess) {
			m_DSPSubregionBottomFeature.reset();
			return result;
		}
	}
	feature = m_DSPSubregionBottomFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDSPSubregionLeft(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionLeftFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetDSPSubregionLeft(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionLeftFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDSPSubregionLeftFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DSPSubregionLeftFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DSPSubregionLeft", m_DSPSubregionLeftFeature);
		if (result != VmbErrorSuccess) {
			m_DSPSubregionLeftFeature.reset();
			return result;
		}
	}
	feature = m_DSPSubregionLeftFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDSPSubregionRight(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionRightFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetDSPSubregionRight(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionRightFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDSPSubregionRightFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DSPSubregionRightFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DSPSubregionRight", m_DSPSubregionRightFeature);
		if (result != VmbErrorSuccess) {
			m_DSPSubregionRightFeature.reset();
			return result;
		}
	}
	feature = m_DSPSubregionRightFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDSPSubregionTop(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionTopFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetDSPSubregionTop(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDSPSubregionTopFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDSPSubregionTopFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DSPSubregionTopFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DSPSubregionTop", m_DSPSubregionTopFeature);
		if (result != VmbErrorSuccess) {
			m_DSPSubregionTopFeature.reset();
			return result;
		}
	}
	feature = m_DSPSubregionTopFeature;
	return VmbErrorSuccess;
}


// Category /Controls/Exposure
VmbErrorType GC2450MCamera::GetExposureAuto(ExposureAutoEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (ExposureAutoEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAuto(ExposureAutoEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAuto", m_ExposureAutoFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureMode(ExposureModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (ExposureModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetExposureMode(ExposureModeEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureMode", m_ExposureModeFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureModeFeature.reset();
			return result;
		}
	}
	feature = m_ExposureModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureTimeAbs(double& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeAbsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetExposureTimeAbs(double value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeAbsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureTimeAbsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureTimeAbsFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureTimeAbs", m_ExposureTimeAbsFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureTimeAbsFeature.reset();
			return result;
		}
	}
	feature = m_ExposureTimeAbsFeature;
	return VmbErrorSuccess;
}


// Category /Controls/Exposure/ExposureAutoControl
VmbErrorType GC2450MCamera::GetExposureAutoAdjustTol(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoAdjustTolFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAutoAdjustTol(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoAdjustTolFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoAdjustTolFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoAdjustTolFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAutoAdjustTol", m_ExposureAutoAdjustTolFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoAdjustTolFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoAdjustTolFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureAutoAlg(ExposureAutoAlgEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoAlgFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (ExposureAutoAlgEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAutoAlg(ExposureAutoAlgEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoAlgFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoAlgFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoAlgFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAutoAlg", m_ExposureAutoAlgFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoAlgFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoAlgFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureAutoMax(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAutoMax(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoMaxFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoMaxFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAutoMax", m_ExposureAutoMaxFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoMaxFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoMaxFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureAutoMin(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoMinFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAutoMin(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoMinFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoMinFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoMinFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAutoMin", m_ExposureAutoMinFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoMinFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoMinFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureAutoOutliers(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoOutliersFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAutoOutliers(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoOutliersFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoOutliersFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoOutliersFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAutoOutliers", m_ExposureAutoOutliersFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoOutliersFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoOutliersFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureAutoRate(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoRateFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAutoRate(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoRateFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoRateFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoRateFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAutoRate", m_ExposureAutoRateFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoRateFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetExposureAutoTarget(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoTargetFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetExposureAutoTarget(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureAutoTargetFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetExposureAutoTargetFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ExposureAutoTargetFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ExposureAutoTarget", m_ExposureAutoTargetFeature);
		if (result != VmbErrorSuccess) {
			m_ExposureAutoTargetFeature.reset();
			return result;
		}
	}
	feature = m_ExposureAutoTargetFeature;
	return VmbErrorSuccess;
}


// Category /Controls/GainControl
VmbErrorType GC2450MCamera::GetGainAuto(GainAutoEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (GainAutoEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetGainAuto(GainAutoEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainAutoFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainAutoFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainAuto", m_GainAutoFeature);
		if (result != VmbErrorSuccess) {
			m_GainAutoFeature.reset();
			return result;
		}
	}
	feature = m_GainAutoFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGainRaw(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainRawFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGainRaw(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainRawFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainRawFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainRawFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainRaw", m_GainRawFeature);
		if (result != VmbErrorSuccess) {
			m_GainRawFeature.reset();
			return result;
		}
	}
	feature = m_GainRawFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGainSelector(GainSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (GainSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetGainSelector(GainSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainSelector", m_GainSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_GainSelectorFeature.reset();
			return result;
		}
	}
	feature = m_GainSelectorFeature;
	return VmbErrorSuccess;
}


// Category /Controls/GainControl/GainAutoControl
VmbErrorType GC2450MCamera::GetGainAutoAdjustTol(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoAdjustTolFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGainAutoAdjustTol(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoAdjustTolFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainAutoAdjustTolFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainAutoAdjustTolFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainAutoAdjustTol", m_GainAutoAdjustTolFeature);
		if (result != VmbErrorSuccess) {
			m_GainAutoAdjustTolFeature.reset();
			return result;
		}
	}
	feature = m_GainAutoAdjustTolFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGainAutoMax(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGainAutoMax(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainAutoMaxFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainAutoMaxFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainAutoMax", m_GainAutoMaxFeature);
		if (result != VmbErrorSuccess) {
			m_GainAutoMaxFeature.reset();
			return result;
		}
	}
	feature = m_GainAutoMaxFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGainAutoMin(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoMinFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGainAutoMin(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoMinFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainAutoMinFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainAutoMinFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainAutoMin", m_GainAutoMinFeature);
		if (result != VmbErrorSuccess) {
			m_GainAutoMinFeature.reset();
			return result;
		}
	}
	feature = m_GainAutoMinFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGainAutoOutliers(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoOutliersFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGainAutoOutliers(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoOutliersFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainAutoOutliersFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainAutoOutliersFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainAutoOutliers", m_GainAutoOutliersFeature);
		if (result != VmbErrorSuccess) {
			m_GainAutoOutliersFeature.reset();
			return result;
		}
	}
	feature = m_GainAutoOutliersFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGainAutoRate(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoRateFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGainAutoRate(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoRateFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainAutoRateFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainAutoRateFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainAutoRate", m_GainAutoRateFeature);
		if (result != VmbErrorSuccess) {
			m_GainAutoRateFeature.reset();
			return result;
		}
	}
	feature = m_GainAutoRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGainAutoTarget(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoTargetFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGainAutoTarget(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainAutoTargetFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGainAutoTargetFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GainAutoTargetFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GainAutoTarget", m_GainAutoTargetFeature);
		if (result != VmbErrorSuccess) {
			m_GainAutoTargetFeature.reset();
			return result;
		}
	}
	feature = m_GainAutoTargetFeature;
	return VmbErrorSuccess;
}


// Category /Controls/Iris
VmbErrorType GC2450MCamera::GetIrisAutoTarget(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisAutoTargetFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetIrisAutoTarget(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisAutoTargetFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetIrisAutoTargetFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_IrisAutoTargetFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("IrisAutoTarget", m_IrisAutoTargetFeature);
		if (result != VmbErrorSuccess) {
			m_IrisAutoTargetFeature.reset();
			return result;
		}
	}
	feature = m_IrisAutoTargetFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetIrisMode(IrisModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (IrisModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetIrisMode(IrisModeEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetIrisModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_IrisModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("IrisMode", m_IrisModeFeature);
		if (result != VmbErrorSuccess) {
			m_IrisModeFeature.reset();
			return result;
		}
	}
	feature = m_IrisModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetIrisVideoLevel(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisVideoLevelFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetIrisVideoLevelFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_IrisVideoLevelFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("IrisVideoLevel", m_IrisVideoLevelFeature);
		if (result != VmbErrorSuccess) {
			m_IrisVideoLevelFeature.reset();
			return result;
		}
	}
	feature = m_IrisVideoLevelFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetIrisVideoLevelMax(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisVideoLevelMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetIrisVideoLevelMax(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisVideoLevelMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetIrisVideoLevelMaxFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_IrisVideoLevelMaxFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("IrisVideoLevelMax", m_IrisVideoLevelMaxFeature);
		if (result != VmbErrorSuccess) {
			m_IrisVideoLevelMaxFeature.reset();
			return result;
		}
	}
	feature = m_IrisVideoLevelMaxFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetIrisVideoLevelMin(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisVideoLevelMinFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetIrisVideoLevelMin(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIrisVideoLevelMinFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetIrisVideoLevelMinFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_IrisVideoLevelMinFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("IrisVideoLevelMin", m_IrisVideoLevelMinFeature);
		if (result != VmbErrorSuccess) {
			m_IrisVideoLevelMinFeature.reset();
			return result;
		}
	}
	feature = m_IrisVideoLevelMinFeature;
	return VmbErrorSuccess;
}


// Category /EventControl
VmbErrorType GC2450MCamera::GetEventNotification(EventNotificationEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventNotificationFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (EventNotificationEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetEventNotification(EventNotificationEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventNotificationFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventNotificationFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventNotificationFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventNotification", m_EventNotificationFeature);
		if (result != VmbErrorSuccess) {
			m_EventNotificationFeature.reset();
			return result;
		}
	}
	feature = m_EventNotificationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventSelector(EventSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (EventSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetEventSelector(EventSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventSelector", m_EventSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_EventSelectorFeature.reset();
			return result;
		}
	}
	feature = m_EventSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventsEnable1(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventsEnable1Feature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetEventsEnable1(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventsEnable1Feature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventsEnable1Feature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventsEnable1Feature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventsEnable1", m_EventsEnable1Feature);
		if (result != VmbErrorSuccess) {
			m_EventsEnable1Feature.reset();
			return result;
		}
	}
	feature = m_EventsEnable1Feature;
	return VmbErrorSuccess;
}


// Category /EventControl/EventData
VmbErrorType GC2450MCamera::GetEventAcquisitionEndFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionEndFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionEndFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionEndFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionEndFrameID", m_EventAcquisitionEndFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionEndFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionEndFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionEndTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionEndTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionEndTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionEndTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionEndTimestamp", m_EventAcquisitionEndTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionEndTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionEndTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionRecordTriggerFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionRecordTriggerFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionRecordTriggerFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionRecordTriggerFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionRecordTriggerFrameID", m_EventAcquisitionRecordTriggerFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionRecordTriggerFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionRecordTriggerFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionRecordTriggerTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionRecordTriggerTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionRecordTriggerTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionRecordTriggerTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionRecordTriggerTimestamp", m_EventAcquisitionRecordTriggerTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionRecordTriggerTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionRecordTriggerTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionStartFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionStartFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionStartFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionStartFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionStartFrameID", m_EventAcquisitionStartFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionStartFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionStartFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionStartTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionStartTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionStartTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionStartTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionStartTimestamp", m_EventAcquisitionStartTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionStartTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionStartTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventErrorFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventErrorFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventErrorFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventErrorFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventErrorFrameID", m_EventErrorFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventErrorFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventErrorFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventErrorTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventErrorTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventErrorTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventErrorTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventErrorTimestamp", m_EventErrorTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventErrorTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventErrorTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventExposureEndFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventExposureEndFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventExposureEndFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventExposureEndFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventExposureEndFrameID", m_EventExposureEndFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventExposureEndFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventExposureEndFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventExposureEndTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventExposureEndTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventExposureEndTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventExposureEndTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventExposureEndTimestamp", m_EventExposureEndTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventExposureEndTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventExposureEndTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventFrameTriggerFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventFrameTriggerFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventFrameTriggerFrameID", m_EventFrameTriggerFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventFrameTriggerFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventFrameTriggerFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerReadyFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventFrameTriggerReadyFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerReadyFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventFrameTriggerReadyFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventFrameTriggerReadyFrameID", m_EventFrameTriggerReadyFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventFrameTriggerReadyFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventFrameTriggerReadyFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerReadyTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventFrameTriggerReadyTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerReadyTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventFrameTriggerReadyTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventFrameTriggerReadyTimestamp", m_EventFrameTriggerReadyTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventFrameTriggerReadyTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventFrameTriggerReadyTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventFrameTriggerTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventFrameTriggerTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventFrameTriggerTimestamp", m_EventFrameTriggerTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventFrameTriggerTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventFrameTriggerTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine1FallingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine1FallingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine1FallingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine1FallingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine1FallingEdgeFrameID", m_EventLine1FallingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine1FallingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine1FallingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine1FallingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine1FallingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine1FallingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine1FallingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine1FallingEdgeTimestamp", m_EventLine1FallingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine1FallingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine1FallingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine1RisingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine1RisingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine1RisingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine1RisingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine1RisingEdgeFrameID", m_EventLine1RisingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine1RisingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine1RisingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine1RisingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine1RisingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine1RisingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine1RisingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine1RisingEdgeTimestamp", m_EventLine1RisingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine1RisingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine1RisingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine2FallingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine2FallingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine2FallingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine2FallingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine2FallingEdgeFrameID", m_EventLine2FallingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine2FallingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine2FallingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine2FallingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine2FallingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine2FallingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine2FallingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine2FallingEdgeTimestamp", m_EventLine2FallingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine2FallingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine2FallingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine2RisingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine2RisingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine2RisingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine2RisingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine2RisingEdgeFrameID", m_EventLine2RisingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine2RisingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine2RisingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine2RisingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine2RisingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine2RisingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine2RisingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine2RisingEdgeTimestamp", m_EventLine2RisingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine2RisingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine2RisingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine3FallingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine3FallingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine3FallingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine3FallingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine3FallingEdgeFrameID", m_EventLine3FallingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine3FallingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine3FallingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine3FallingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine3FallingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine3FallingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine3FallingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine3FallingEdgeTimestamp", m_EventLine3FallingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine3FallingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine3FallingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine3RisingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine3RisingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine3RisingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine3RisingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine3RisingEdgeFrameID", m_EventLine3RisingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine3RisingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine3RisingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine3RisingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine3RisingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine3RisingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine3RisingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine3RisingEdgeTimestamp", m_EventLine3RisingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine3RisingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine3RisingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine4FallingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine4FallingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine4FallingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine4FallingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine4FallingEdgeFrameID", m_EventLine4FallingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine4FallingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine4FallingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine4FallingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine4FallingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine4FallingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine4FallingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine4FallingEdgeTimestamp", m_EventLine4FallingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine4FallingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine4FallingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine4RisingEdgeFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine4RisingEdgeFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine4RisingEdgeFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine4RisingEdgeFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine4RisingEdgeFrameID", m_EventLine4RisingEdgeFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine4RisingEdgeFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventLine4RisingEdgeFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine4RisingEdgeTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine4RisingEdgeTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine4RisingEdgeTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine4RisingEdgeTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine4RisingEdgeTimestamp", m_EventLine4RisingEdgeTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine4RisingEdgeTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventLine4RisingEdgeTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventOverflowFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventOverflowFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventOverflowFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventOverflowFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventOverflowFrameID", m_EventOverflowFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventOverflowFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventOverflowFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventOverflowTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventOverflowTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventOverflowTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventOverflowTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventOverflowTimestamp", m_EventOverflowTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventOverflowTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventOverflowTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLockedFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventPtpSyncLockedFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLockedFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventPtpSyncLockedFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventPtpSyncLockedFrameID", m_EventPtpSyncLockedFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventPtpSyncLockedFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventPtpSyncLockedFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLockedTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventPtpSyncLockedTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLockedTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventPtpSyncLockedTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventPtpSyncLockedTimestamp", m_EventPtpSyncLockedTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventPtpSyncLockedTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventPtpSyncLockedTimestampFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLostFrameID(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventPtpSyncLostFrameIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLostFrameIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventPtpSyncLostFrameIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventPtpSyncLostFrameID", m_EventPtpSyncLostFrameIDFeature);
		if (result != VmbErrorSuccess) {
			m_EventPtpSyncLostFrameIDFeature.reset();
			return result;
		}
	}
	feature = m_EventPtpSyncLostFrameIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLostTimestamp(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventPtpSyncLostTimestampFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLostTimestampFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventPtpSyncLostTimestampFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventPtpSyncLostTimestamp", m_EventPtpSyncLostTimestampFeature);
		if (result != VmbErrorSuccess) {
			m_EventPtpSyncLostTimestampFeature.reset();
			return result;
		}
	}
	feature = m_EventPtpSyncLostTimestampFeature;
	return VmbErrorSuccess;
}


// Category /EventControl/EventID
VmbErrorType GC2450MCamera::GetEventAcquisitionEnd(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionEndFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionEndFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionEndFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionEnd", m_EventAcquisitionEndFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionEndFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionEndFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionRecordTrigger(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionRecordTriggerFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionRecordTriggerFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionRecordTriggerFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionRecordTrigger", m_EventAcquisitionRecordTriggerFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionRecordTriggerFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionRecordTriggerFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionStart(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventAcquisitionStartFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventAcquisitionStartFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventAcquisitionStartFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventAcquisitionStart", m_EventAcquisitionStartFeature);
		if (result != VmbErrorSuccess) {
			m_EventAcquisitionStartFeature.reset();
			return result;
		}
	}
	feature = m_EventAcquisitionStartFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventError(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventErrorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventErrorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventErrorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventError", m_EventErrorFeature);
		if (result != VmbErrorSuccess) {
			m_EventErrorFeature.reset();
			return result;
		}
	}
	feature = m_EventErrorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventExposureEnd(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventExposureEndFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventExposureEndFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventExposureEndFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventExposureEnd", m_EventExposureEndFeature);
		if (result != VmbErrorSuccess) {
			m_EventExposureEndFeature.reset();
			return result;
		}
	}
	feature = m_EventExposureEndFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventFrameTrigger(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventFrameTriggerFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventFrameTriggerFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventFrameTrigger", m_EventFrameTriggerFeature);
		if (result != VmbErrorSuccess) {
			m_EventFrameTriggerFeature.reset();
			return result;
		}
	}
	feature = m_EventFrameTriggerFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerReady(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventFrameTriggerReadyFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventFrameTriggerReadyFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventFrameTriggerReadyFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventFrameTriggerReady", m_EventFrameTriggerReadyFeature);
		if (result != VmbErrorSuccess) {
			m_EventFrameTriggerReadyFeature.reset();
			return result;
		}
	}
	feature = m_EventFrameTriggerReadyFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine1FallingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine1FallingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine1FallingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine1FallingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine1FallingEdge", m_EventLine1FallingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine1FallingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine1FallingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine1RisingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine1RisingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine1RisingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine1RisingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine1RisingEdge", m_EventLine1RisingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine1RisingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine1RisingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine2FallingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine2FallingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine2FallingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine2FallingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine2FallingEdge", m_EventLine2FallingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine2FallingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine2FallingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine2RisingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine2RisingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine2RisingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine2RisingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine2RisingEdge", m_EventLine2RisingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine2RisingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine2RisingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine3FallingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine3FallingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine3FallingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine3FallingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine3FallingEdge", m_EventLine3FallingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine3FallingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine3FallingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine3RisingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine3RisingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine3RisingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine3RisingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine3RisingEdge", m_EventLine3RisingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine3RisingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine3RisingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine4FallingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine4FallingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine4FallingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine4FallingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine4FallingEdge", m_EventLine4FallingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine4FallingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine4FallingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventLine4RisingEdge(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventLine4RisingEdgeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventLine4RisingEdgeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventLine4RisingEdgeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventLine4RisingEdge", m_EventLine4RisingEdgeFeature);
		if (result != VmbErrorSuccess) {
			m_EventLine4RisingEdgeFeature.reset();
			return result;
		}
	}
	feature = m_EventLine4RisingEdgeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventOverflow(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventOverflowFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventOverflowFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventOverflowFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventOverflow", m_EventOverflowFeature);
		if (result != VmbErrorSuccess) {
			m_EventOverflowFeature.reset();
			return result;
		}
	}
	feature = m_EventOverflowFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLocked(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventPtpSyncLockedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLockedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventPtpSyncLockedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventPtpSyncLocked", m_EventPtpSyncLockedFeature);
		if (result != VmbErrorSuccess) {
			m_EventPtpSyncLockedFeature.reset();
			return result;
		}
	}
	feature = m_EventPtpSyncLockedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLost(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventPtpSyncLostFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetEventPtpSyncLostFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_EventPtpSyncLostFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("EventPtpSyncLost", m_EventPtpSyncLostFeature);
		if (result != VmbErrorSuccess) {
			m_EventPtpSyncLostFeature.reset();
			return result;
		}
	}
	feature = m_EventPtpSyncLostFeature;
	return VmbErrorSuccess;
}


// Category /GigE
VmbErrorType GC2450MCamera::GetBandwidthControlMode(BandwidthControlModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBandwidthControlModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (BandwidthControlModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetBandwidthControlMode(BandwidthControlModeEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBandwidthControlModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetBandwidthControlModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_BandwidthControlModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("BandwidthControlMode", m_BandwidthControlModeFeature);
		if (result != VmbErrorSuccess) {
			m_BandwidthControlModeFeature.reset();
			return result;
		}
	}
	feature = m_BandwidthControlModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetChunkModeActive(bool& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetChunkModeActiveFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetChunkModeActive(bool value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetChunkModeActiveFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetChunkModeActiveFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ChunkModeActiveFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ChunkModeActive", m_ChunkModeActiveFeature);
		if (result != VmbErrorSuccess) {
			m_ChunkModeActiveFeature.reset();
			return result;
		}
	}
	feature = m_ChunkModeActiveFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevSCPSPacketSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSPacketSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGevSCPSPacketSize(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSPacketSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevSCPSPacketSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevSCPSPacketSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevSCPSPacketSize", m_GevSCPSPacketSizeFeature);
		if (result != VmbErrorSuccess) {
			m_GevSCPSPacketSizeFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPSPacketSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetNonImagePayloadSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetNonImagePayloadSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetNonImagePayloadSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_NonImagePayloadSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("NonImagePayloadSize", m_NonImagePayloadSizeFeature);
		if (result != VmbErrorSuccess) {
			m_NonImagePayloadSizeFeature.reset();
			return result;
		}
	}
	feature = m_NonImagePayloadSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetPayloadSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPayloadSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetPayloadSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_PayloadSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("PayloadSize", m_PayloadSizeFeature);
		if (result != VmbErrorSuccess) {
			m_PayloadSizeFeature.reset();
			return result;
		}
	}
	feature = m_PayloadSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStreamBytesPerSecond(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamBytesPerSecondFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetStreamBytesPerSecond(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamBytesPerSecondFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamBytesPerSecondFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamBytesPerSecondFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamBytesPerSecond", m_StreamBytesPerSecondFeature);
		if (result != VmbErrorSuccess) {
			m_StreamBytesPerSecondFeature.reset();
			return result;
		}
	}
	feature = m_StreamBytesPerSecondFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStreamFrameRateConstrain(bool& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamFrameRateConstrainFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetStreamFrameRateConstrain(bool value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamFrameRateConstrainFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamFrameRateConstrainFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamFrameRateConstrainFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamFrameRateConstrain", m_StreamFrameRateConstrainFeature);
		if (result != VmbErrorSuccess) {
			m_StreamFrameRateConstrainFeature.reset();
			return result;
		}
	}
	feature = m_StreamFrameRateConstrainFeature;
	return VmbErrorSuccess;
}


// Category /GigE/Configuration
VmbErrorType GC2450MCamera::GetGevIPConfigurationMode(GevIPConfigurationModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevIPConfigurationModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (GevIPConfigurationModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::GetGevIPConfigurationModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevIPConfigurationModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevIPConfigurationMode", m_GevIPConfigurationModeFeature);
		if (result != VmbErrorSuccess) {
			m_GevIPConfigurationModeFeature.reset();
			return result;
		}
	}
	feature = m_GevIPConfigurationModeFeature;
	return VmbErrorSuccess;
}


// Category /GigE/Current
VmbErrorType GC2450MCamera::GetGevCurrentDefaultGateway(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentDefaultGatewayFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevCurrentDefaultGatewayFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevCurrentDefaultGatewayFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevCurrentDefaultGateway", m_GevCurrentDefaultGatewayFeature);
		if (result != VmbErrorSuccess) {
			m_GevCurrentDefaultGatewayFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentDefaultGatewayFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevCurrentIPAddress(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPAddressFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevCurrentIPAddressFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevCurrentIPAddressFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevCurrentIPAddress", m_GevCurrentIPAddressFeature);
		if (result != VmbErrorSuccess) {
			m_GevCurrentIPAddressFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentIPAddressFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevCurrentSubnetMask(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentSubnetMaskFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevCurrentSubnetMaskFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevCurrentSubnetMaskFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevCurrentSubnetMask", m_GevCurrentSubnetMaskFeature);
		if (result != VmbErrorSuccess) {
			m_GevCurrentSubnetMaskFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentSubnetMaskFeature;
	return VmbErrorSuccess;
}


// Category /GigE/GVCP
VmbErrorType GC2450MCamera::GetGVCPCmdRetries(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdRetriesFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVCPCmdRetries(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdRetriesFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVCPCmdRetriesFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVCPCmdRetriesFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVCPCmdRetries", m_GVCPCmdRetriesFeature);
		if (result != VmbErrorSuccess) {
			m_GVCPCmdRetriesFeature.reset();
			return result;
		}
	}
	feature = m_GVCPCmdRetriesFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVCPCmdTimeout(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdTimeoutFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVCPCmdTimeout(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdTimeoutFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVCPCmdTimeoutFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVCPCmdTimeoutFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVCPCmdTimeout", m_GVCPCmdTimeoutFeature);
		if (result != VmbErrorSuccess) {
			m_GVCPCmdTimeoutFeature.reset();
			return result;
		}
	}
	feature = m_GVCPCmdTimeoutFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevHeartbeatInterval(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatIntervalFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGevHeartbeatInterval(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatIntervalFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevHeartbeatIntervalFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevHeartbeatIntervalFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevHeartbeatInterval", m_GevHeartbeatIntervalFeature);
		if (result != VmbErrorSuccess) {
			m_GevHeartbeatIntervalFeature.reset();
			return result;
		}
	}
	feature = m_GevHeartbeatIntervalFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevHeartbeatTimeout(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatTimeoutFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGevHeartbeatTimeout(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatTimeoutFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevHeartbeatTimeoutFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevHeartbeatTimeoutFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevHeartbeatTimeout", m_GevHeartbeatTimeoutFeature);
		if (result != VmbErrorSuccess) {
			m_GevHeartbeatTimeoutFeature.reset();
			return result;
		}
	}
	feature = m_GevHeartbeatTimeoutFeature;
	return VmbErrorSuccess;
}


// Category /GigE/PTP
VmbErrorType GC2450MCamera::GetPtpAcquisitionGateTime(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPtpAcquisitionGateTimeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetPtpAcquisitionGateTime(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPtpAcquisitionGateTimeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetPtpAcquisitionGateTimeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_PtpAcquisitionGateTimeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("PtpAcquisitionGateTime", m_PtpAcquisitionGateTimeFeature);
		if (result != VmbErrorSuccess) {
			m_PtpAcquisitionGateTimeFeature.reset();
			return result;
		}
	}
	feature = m_PtpAcquisitionGateTimeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetPtpMode(PtpModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPtpModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (PtpModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetPtpMode(PtpModeEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPtpModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetPtpModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_PtpModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("PtpMode", m_PtpModeFeature);
		if (result != VmbErrorSuccess) {
			m_PtpModeFeature.reset();
			return result;
		}
	}
	feature = m_PtpModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetPtpStatus(PtpStatusEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPtpStatusFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (PtpStatusEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::GetPtpStatusFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_PtpStatusFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("PtpStatus", m_PtpStatusFeature);
		if (result != VmbErrorSuccess) {
			m_PtpStatusFeature.reset();
			return result;
		}
	}
	feature = m_PtpStatusFeature;
	return VmbErrorSuccess;
}


// Category /GigE/Persistent
VmbErrorType GC2450MCamera::GetGevPersistentDefaultGateway(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevPersistentDefaultGatewayFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevPersistentDefaultGatewayFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevPersistentDefaultGatewayFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevPersistentDefaultGateway", m_GevPersistentDefaultGatewayFeature);
		if (result != VmbErrorSuccess) {
			m_GevPersistentDefaultGatewayFeature.reset();
			return result;
		}
	}
	feature = m_GevPersistentDefaultGatewayFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevPersistentIPAddress(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevPersistentIPAddressFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevPersistentIPAddressFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevPersistentIPAddressFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevPersistentIPAddress", m_GevPersistentIPAddressFeature);
		if (result != VmbErrorSuccess) {
			m_GevPersistentIPAddressFeature.reset();
			return result;
		}
	}
	feature = m_GevPersistentIPAddressFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevPersistentSubnetMask(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevPersistentSubnetMaskFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevPersistentSubnetMaskFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevPersistentSubnetMaskFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevPersistentSubnetMask", m_GevPersistentSubnetMaskFeature);
		if (result != VmbErrorSuccess) {
			m_GevPersistentSubnetMaskFeature.reset();
			return result;
		}
	}
	feature = m_GevPersistentSubnetMaskFeature;
	return VmbErrorSuccess;
}


// Category /GigE/StreamHold
VmbErrorType GC2450MCamera::GetStreamHoldCapacity(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamHoldCapacityFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamHoldCapacityFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamHoldCapacityFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamHoldCapacity", m_StreamHoldCapacityFeature);
		if (result != VmbErrorSuccess) {
			m_StreamHoldCapacityFeature.reset();
			return result;
		}
	}
	feature = m_StreamHoldCapacityFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStreamHoldEnable(StreamHoldEnableEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamHoldEnableFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (StreamHoldEnableEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetStreamHoldEnable(StreamHoldEnableEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamHoldEnableFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamHoldEnableFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamHoldEnableFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamHoldEnable", m_StreamHoldEnableFeature);
		if (result != VmbErrorSuccess) {
			m_StreamHoldEnableFeature.reset();
			return result;
		}
	}
	feature = m_StreamHoldEnableFeature;
	return VmbErrorSuccess;
}


// Category /GigE/Timestamp
VmbErrorType GC2450MCamera::GevTimestampControlLatch() {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampControlLatchFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetGevTimestampControlLatchFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevTimestampControlLatchFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevTimestampControlLatch", m_GevTimestampControlLatchFeature);
		if (result != VmbErrorSuccess) {
			m_GevTimestampControlLatchFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampControlLatchFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GevTimestampControlReset() {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampControlResetFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetGevTimestampControlResetFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevTimestampControlResetFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevTimestampControlReset", m_GevTimestampControlResetFeature);
		if (result != VmbErrorSuccess) {
			m_GevTimestampControlResetFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampControlResetFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevTimestampTickFrequency(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampTickFrequencyFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevTimestampTickFrequencyFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevTimestampTickFrequencyFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevTimestampTickFrequency", m_GevTimestampTickFrequencyFeature);
		if (result != VmbErrorSuccess) {
			m_GevTimestampTickFrequencyFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampTickFrequencyFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevTimestampValue(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampValueFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevTimestampValueFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevTimestampValueFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevTimestampValue", m_GevTimestampValueFeature);
		if (result != VmbErrorSuccess) {
			m_GevTimestampValueFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampValueFeature;
	return VmbErrorSuccess;
}


// Category /IO/Strobe
VmbErrorType GC2450MCamera::GetStrobeDelay(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeDelayFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetStrobeDelay(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeDelayFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStrobeDelayFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StrobeDelayFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StrobeDelay", m_StrobeDelayFeature);
		if (result != VmbErrorSuccess) {
			m_StrobeDelayFeature.reset();
			return result;
		}
	}
	feature = m_StrobeDelayFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStrobeDuration(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeDurationFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetStrobeDuration(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeDurationFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStrobeDurationFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StrobeDurationFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StrobeDuration", m_StrobeDurationFeature);
		if (result != VmbErrorSuccess) {
			m_StrobeDurationFeature.reset();
			return result;
		}
	}
	feature = m_StrobeDurationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStrobeDurationMode(StrobeDurationModeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeDurationModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (StrobeDurationModeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetStrobeDurationMode(StrobeDurationModeEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeDurationModeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStrobeDurationModeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StrobeDurationModeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StrobeDurationMode", m_StrobeDurationModeFeature);
		if (result != VmbErrorSuccess) {
			m_StrobeDurationModeFeature.reset();
			return result;
		}
	}
	feature = m_StrobeDurationModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStrobeSource(StrobeSourceEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeSourceFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (StrobeSourceEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetStrobeSource(StrobeSourceEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStrobeSourceFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStrobeSourceFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StrobeSourceFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StrobeSource", m_StrobeSourceFeature);
		if (result != VmbErrorSuccess) {
			m_StrobeSourceFeature.reset();
			return result;
		}
	}
	feature = m_StrobeSourceFeature;
	return VmbErrorSuccess;
}


// Category /IO/SyncIn
VmbErrorType GC2450MCamera::GetSyncInGlitchFilter(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncInGlitchFilterFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetSyncInGlitchFilter(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncInGlitchFilterFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSyncInGlitchFilterFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SyncInGlitchFilterFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SyncInGlitchFilter", m_SyncInGlitchFilterFeature);
		if (result != VmbErrorSuccess) {
			m_SyncInGlitchFilterFeature.reset();
			return result;
		}
	}
	feature = m_SyncInGlitchFilterFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSyncInLevels(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncInLevelsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSyncInLevelsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SyncInLevelsFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SyncInLevels", m_SyncInLevelsFeature);
		if (result != VmbErrorSuccess) {
			m_SyncInLevelsFeature.reset();
			return result;
		}
	}
	feature = m_SyncInLevelsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSyncInSelector(SyncInSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncInSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (SyncInSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetSyncInSelector(SyncInSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncInSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSyncInSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SyncInSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SyncInSelector", m_SyncInSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_SyncInSelectorFeature.reset();
			return result;
		}
	}
	feature = m_SyncInSelectorFeature;
	return VmbErrorSuccess;
}


// Category /IO/SyncOut
VmbErrorType GC2450MCamera::GetSyncOutLevels(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutLevelsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetSyncOutLevels(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutLevelsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSyncOutLevelsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SyncOutLevelsFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SyncOutLevels", m_SyncOutLevelsFeature);
		if (result != VmbErrorSuccess) {
			m_SyncOutLevelsFeature.reset();
			return result;
		}
	}
	feature = m_SyncOutLevelsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSyncOutPolarity(SyncOutPolarityEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutPolarityFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (SyncOutPolarityEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetSyncOutPolarity(SyncOutPolarityEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutPolarityFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSyncOutPolarityFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SyncOutPolarityFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SyncOutPolarity", m_SyncOutPolarityFeature);
		if (result != VmbErrorSuccess) {
			m_SyncOutPolarityFeature.reset();
			return result;
		}
	}
	feature = m_SyncOutPolarityFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSyncOutSelector(SyncOutSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (SyncOutSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetSyncOutSelector(SyncOutSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSyncOutSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SyncOutSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SyncOutSelector", m_SyncOutSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_SyncOutSelectorFeature.reset();
			return result;
		}
	}
	feature = m_SyncOutSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSyncOutSource(SyncOutSourceEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutSourceFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (SyncOutSourceEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetSyncOutSource(SyncOutSourceEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSyncOutSourceFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSyncOutSourceFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SyncOutSourceFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SyncOutSource", m_SyncOutSourceFeature);
		if (result != VmbErrorSuccess) {
			m_SyncOutSourceFeature.reset();
			return result;
		}
	}
	feature = m_SyncOutSourceFeature;
	return VmbErrorSuccess;
}


// Category /ImageFormat
VmbErrorType GC2450MCamera::GetHeight(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetHeightFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetHeight(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetHeightFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetHeightFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_HeightFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("Height", m_HeightFeature);
		if (result != VmbErrorSuccess) {
			m_HeightFeature.reset();
			return result;
		}
	}
	feature = m_HeightFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetHeightMax(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetHeightMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetHeightMaxFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_HeightMaxFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("HeightMax", m_HeightMaxFeature);
		if (result != VmbErrorSuccess) {
			m_HeightMaxFeature.reset();
			return result;
		}
	}
	feature = m_HeightMaxFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetImageSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetImageSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetImageSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_ImageSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("ImageSize", m_ImageSizeFeature);
		if (result != VmbErrorSuccess) {
			m_ImageSizeFeature.reset();
			return result;
		}
	}
	feature = m_ImageSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetOffsetX(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetXFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetOffsetX(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetXFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetOffsetXFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_OffsetXFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("OffsetX", m_OffsetXFeature);
		if (result != VmbErrorSuccess) {
			m_OffsetXFeature.reset();
			return result;
		}
	}
	feature = m_OffsetXFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetOffsetY(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetYFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetOffsetY(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetYFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetOffsetYFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_OffsetYFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("OffsetY", m_OffsetYFeature);
		if (result != VmbErrorSuccess) {
			m_OffsetYFeature.reset();
			return result;
		}
	}
	feature = m_OffsetYFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetPixelFormat(PixelFormatEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPixelFormatFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (PixelFormatEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetPixelFormat(PixelFormatEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPixelFormatFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetPixelFormatFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_PixelFormatFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("PixelFormat", m_PixelFormatFeature);
		if (result != VmbErrorSuccess) {
			m_PixelFormatFeature.reset();
			return result;
		}
	}
	feature = m_PixelFormatFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetWidth(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetWidthFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetWidth(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetWidthFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetWidthFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_WidthFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("Width", m_WidthFeature);
		if (result != VmbErrorSuccess) {
			m_WidthFeature.reset();
			return result;
		}
	}
	feature = m_WidthFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetWidthMax(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetWidthMaxFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetWidthMaxFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_WidthMaxFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("WidthMax", m_WidthMaxFeature);
		if (result != VmbErrorSuccess) {
			m_WidthMaxFeature.reset();
			return result;
		}
	}
	feature = m_WidthMaxFeature;
	return VmbErrorSuccess;
}


// Category /ImageMode
VmbErrorType GC2450MCamera::GetBinningHorizontal(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBinningHorizontalFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetBinningHorizontal(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBinningHorizontalFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetBinningHorizontalFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_BinningHorizontalFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("BinningHorizontal", m_BinningHorizontalFeature);
		if (result != VmbErrorSuccess) {
			m_BinningHorizontalFeature.reset();
			return result;
		}
	}
	feature = m_BinningHorizontalFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetBinningVertical(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBinningVerticalFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetBinningVertical(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBinningVerticalFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetBinningVerticalFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_BinningVerticalFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("BinningVertical", m_BinningVerticalFeature);
		if (result != VmbErrorSuccess) {
			m_BinningVerticalFeature.reset();
			return result;
		}
	}
	feature = m_BinningVerticalFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSensorHeight(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSensorHeightFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSensorHeightFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SensorHeightFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SensorHeight", m_SensorHeightFeature);
		if (result != VmbErrorSuccess) {
			m_SensorHeightFeature.reset();
			return result;
		}
	}
	feature = m_SensorHeightFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSensorWidth(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSensorWidthFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSensorWidthFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SensorWidthFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SensorWidth", m_SensorWidthFeature);
		if (result != VmbErrorSuccess) {
			m_SensorWidthFeature.reset();
			return result;
		}
	}
	feature = m_SensorWidthFeature;
	return VmbErrorSuccess;
}


// Category /Info
VmbErrorType GC2450MCamera::GetDeviceFirmwareVersion(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceFirmwareVersionFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDeviceFirmwareVersionFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DeviceFirmwareVersionFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DeviceFirmwareVersion", m_DeviceFirmwareVersionFeature);
		if (result != VmbErrorSuccess) {
			m_DeviceFirmwareVersionFeature.reset();
			return result;
		}
	}
	feature = m_DeviceFirmwareVersionFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDeviceID(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDeviceIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DeviceIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DeviceID", m_DeviceIDFeature);
		if (result != VmbErrorSuccess) {
			m_DeviceIDFeature.reset();
			return result;
		}
	}
	feature = m_DeviceIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDeviceModelName(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceModelNameFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDeviceModelNameFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DeviceModelNameFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DeviceModelName", m_DeviceModelNameFeature);
		if (result != VmbErrorSuccess) {
			m_DeviceModelNameFeature.reset();
			return result;
		}
	}
	feature = m_DeviceModelNameFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDevicePartNumber(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDevicePartNumberFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDevicePartNumberFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DevicePartNumberFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DevicePartNumber", m_DevicePartNumberFeature);
		if (result != VmbErrorSuccess) {
			m_DevicePartNumberFeature.reset();
			return result;
		}
	}
	feature = m_DevicePartNumberFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDeviceScanType(DeviceScanTypeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceScanTypeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (DeviceScanTypeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::GetDeviceScanTypeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DeviceScanTypeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DeviceScanType", m_DeviceScanTypeFeature);
		if (result != VmbErrorSuccess) {
			m_DeviceScanTypeFeature.reset();
			return result;
		}
	}
	feature = m_DeviceScanTypeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDeviceUserID(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceUserIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDeviceUserIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DeviceUserIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DeviceUserID", m_DeviceUserIDFeature);
		if (result != VmbErrorSuccess) {
			m_DeviceUserIDFeature.reset();
			return result;
		}
	}
	feature = m_DeviceUserIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetDeviceVendorName(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceVendorNameFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetDeviceVendorNameFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_DeviceVendorNameFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("DeviceVendorName", m_DeviceVendorNameFeature);
		if (result != VmbErrorSuccess) {
			m_DeviceVendorNameFeature.reset();
			return result;
		}
	}
	feature = m_DeviceVendorNameFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetFirmwareVerBuild(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetFirmwareVerBuildFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetFirmwareVerBuildFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_FirmwareVerBuildFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("FirmwareVerBuild", m_FirmwareVerBuildFeature);
		if (result != VmbErrorSuccess) {
			m_FirmwareVerBuildFeature.reset();
			return result;
		}
	}
	feature = m_FirmwareVerBuildFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetFirmwareVerMajor(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetFirmwareVerMajorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetFirmwareVerMajorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_FirmwareVerMajorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("FirmwareVerMajor", m_FirmwareVerMajorFeature);
		if (result != VmbErrorSuccess) {
			m_FirmwareVerMajorFeature.reset();
			return result;
		}
	}
	feature = m_FirmwareVerMajorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetFirmwareVerMinor(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetFirmwareVerMinorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetFirmwareVerMinorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_FirmwareVerMinorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("FirmwareVerMinor", m_FirmwareVerMinorFeature);
		if (result != VmbErrorSuccess) {
			m_FirmwareVerMinorFeature.reset();
			return result;
		}
	}
	feature = m_FirmwareVerMinorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGevDeviceMACAddress(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevDeviceMACAddressFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGevDeviceMACAddressFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GevDeviceMACAddressFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GevDeviceMACAddress", m_GevDeviceMACAddressFeature);
		if (result != VmbErrorSuccess) {
			m_GevDeviceMACAddressFeature.reset();
			return result;
		}
	}
	feature = m_GevDeviceMACAddressFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSensorBits(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSensorBitsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetSensorBitsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SensorBitsFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SensorBits", m_SensorBitsFeature);
		if (result != VmbErrorSuccess) {
			m_SensorBitsFeature.reset();
			return result;
		}
	}
	feature = m_SensorBitsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetSensorType(SensorTypeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSensorTypeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (SensorTypeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::GetSensorTypeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_SensorTypeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("SensorType", m_SensorTypeFeature);
		if (result != VmbErrorSuccess) {
			m_SensorTypeFeature.reset();
			return result;
		}
	}
	feature = m_SensorTypeFeature;
	return VmbErrorSuccess;
}


// Category /SavedUserSets
VmbErrorType GC2450MCamera::GetUserSetDefaultSelector(UserSetDefaultSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUserSetDefaultSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (UserSetDefaultSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetUserSetDefaultSelector(UserSetDefaultSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUserSetDefaultSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetUserSetDefaultSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_UserSetDefaultSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("UserSetDefaultSelector", m_UserSetDefaultSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_UserSetDefaultSelectorFeature.reset();
			return result;
		}
	}
	feature = m_UserSetDefaultSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::UserSetLoad() {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUserSetLoadFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetUserSetLoadFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_UserSetLoadFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("UserSetLoad", m_UserSetLoadFeature);
		if (result != VmbErrorSuccess) {
			m_UserSetLoadFeature.reset();
			return result;
		}
	}
	feature = m_UserSetLoadFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::UserSetSave() {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUserSetSaveFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetUserSetSaveFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_UserSetSaveFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("UserSetSave", m_UserSetSaveFeature);
		if (result != VmbErrorSuccess) {
			m_UserSetSaveFeature.reset();
			return result;
		}
	}
	feature = m_UserSetSaveFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetUserSetSelector(UserSetSelectorEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUserSetSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (UserSetSelectorEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetUserSetSelector(UserSetSelectorEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUserSetSelectorFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetUserSetSelectorFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_UserSetSelectorFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("UserSetSelector", m_UserSetSelectorFeature);
		if (result != VmbErrorSuccess) {
			m_UserSetSelectorFeature.reset();
			return result;
		}
	}
	feature = m_UserSetSelectorFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Info
VmbErrorType GC2450MCamera::GetGVSPFilterVersion(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPFilterVersionFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPFilterVersionFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPFilterVersionFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPFilterVersion", m_GVSPFilterVersionFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPFilterVersionFeature.reset();
			return result;
		}
	}
	feature = m_GVSPFilterVersionFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Multicast
VmbErrorType GC2450MCamera::GetMulticastEnable(bool& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastEnableFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetMulticastEnable(bool value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastEnableFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetMulticastEnableFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_MulticastEnableFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("MulticastEnable", m_MulticastEnableFeature);
		if (result != VmbErrorSuccess) {
			m_MulticastEnableFeature.reset();
			return result;
		}
	}
	feature = m_MulticastEnableFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetMulticastIPAddress(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastIPAddressFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetMulticastIPAddress(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastIPAddressFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetMulticastIPAddressFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_MulticastIPAddressFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("MulticastIPAddress", m_MulticastIPAddressFeature);
		if (result != VmbErrorSuccess) {
			m_MulticastIPAddressFeature.reset();
			return result;
		}
	}
	feature = m_MulticastIPAddressFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Settings
VmbErrorType GC2450MCamera::GVSPAdjustPacketSize() {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPAdjustPacketSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand();
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPAdjustPacketSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPAdjustPacketSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPAdjustPacketSize", m_GVSPAdjustPacketSizeFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPAdjustPacketSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPAdjustPacketSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPBurstSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPBurstSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPBurstSize(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPBurstSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPBurstSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPBurstSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPBurstSize", m_GVSPBurstSizeFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPBurstSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPBurstSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPDriver(GVSPDriverEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPDriverFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (GVSPDriverEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPDriver(GVSPDriverEnum value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPDriverFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPDriverFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPDriverFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPDriver", m_GVSPDriverFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPDriverFeature.reset();
			return result;
		}
	}
	feature = m_GVSPDriverFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPHostReceiveBuffers(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPHostReceiveBuffersFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPHostReceiveBuffers(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPHostReceiveBuffersFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPHostReceiveBuffersFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPHostReceiveBuffersFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPHostReceiveBuffers", m_GVSPHostReceiveBuffersFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPHostReceiveBuffersFeature.reset();
			return result;
		}
	}
	feature = m_GVSPHostReceiveBuffersFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPMaxLookBack(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxLookBackFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPMaxLookBack(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxLookBackFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPMaxLookBackFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPMaxLookBackFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPMaxLookBack", m_GVSPMaxLookBackFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPMaxLookBackFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMaxLookBackFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPMaxRequests(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxRequestsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPMaxRequests(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxRequestsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPMaxRequestsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPMaxRequestsFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPMaxRequests", m_GVSPMaxRequestsFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPMaxRequestsFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMaxRequestsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPMaxWaitSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxWaitSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPMaxWaitSize(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxWaitSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPMaxWaitSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPMaxWaitSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPMaxWaitSize", m_GVSPMaxWaitSizeFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPMaxWaitSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMaxWaitSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPMissingSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMissingSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPMissingSize(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMissingSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPMissingSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPMissingSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPMissingSize", m_GVSPMissingSizeFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPMissingSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMissingSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPPacketSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPPacketSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPPacketSize(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPPacketSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPPacketSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPPacketSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPPacketSize", m_GVSPPacketSizeFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPPacketSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPPacketSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPTiltingSize(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTiltingSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPTiltingSize(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTiltingSizeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPTiltingSizeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPTiltingSizeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPTiltingSize", m_GVSPTiltingSizeFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPTiltingSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPTiltingSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetGVSPTimeout(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTimeoutFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::SetGVSPTimeout(VmbInt64_t value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTimeoutFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetGVSPTimeoutFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_GVSPTimeoutFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("GVSPTimeout", m_GVSPTimeoutFeature);
		if (result != VmbErrorSuccess) {
			m_GVSPTimeoutFeature.reset();
			return result;
		}
	}
	feature = m_GVSPTimeoutFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Statistics
VmbErrorType GC2450MCamera::GetStatFrameDelivered(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameDeliveredFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatFrameDeliveredFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatFrameDeliveredFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatFrameDelivered", m_StatFrameDeliveredFeature);
		if (result != VmbErrorSuccess) {
			m_StatFrameDeliveredFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameDeliveredFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatFrameDropped(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameDroppedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatFrameDroppedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatFrameDroppedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatFrameDropped", m_StatFrameDroppedFeature);
		if (result != VmbErrorSuccess) {
			m_StatFrameDroppedFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameDroppedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatFrameRate(double& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameRateFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatFrameRateFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatFrameRateFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatFrameRate", m_StatFrameRateFeature);
		if (result != VmbErrorSuccess) {
			m_StatFrameRateFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatFrameRescued(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameRescuedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatFrameRescuedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatFrameRescuedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatFrameRescued", m_StatFrameRescuedFeature);
		if (result != VmbErrorSuccess) {
			m_StatFrameRescuedFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameRescuedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatFrameShoved(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameShovedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatFrameShovedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatFrameShovedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatFrameShoved", m_StatFrameShovedFeature);
		if (result != VmbErrorSuccess) {
			m_StatFrameShovedFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameShovedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatFrameUnderrun(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameUnderrunFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatFrameUnderrunFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatFrameUnderrunFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatFrameUnderrun", m_StatFrameUnderrunFeature);
		if (result != VmbErrorSuccess) {
			m_StatFrameUnderrunFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameUnderrunFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatLocalRate(double& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatLocalRateFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatLocalRateFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatLocalRateFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatLocalRate", m_StatLocalRateFeature);
		if (result != VmbErrorSuccess) {
			m_StatLocalRateFeature.reset();
			return result;
		}
	}
	feature = m_StatLocalRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatPacketErrors(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketErrorsFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatPacketErrorsFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatPacketErrorsFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatPacketErrors", m_StatPacketErrorsFeature);
		if (result != VmbErrorSuccess) {
			m_StatPacketErrorsFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketErrorsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatPacketMissed(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketMissedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatPacketMissedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatPacketMissedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatPacketMissed", m_StatPacketMissedFeature);
		if (result != VmbErrorSuccess) {
			m_StatPacketMissedFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketMissedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatPacketReceived(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketReceivedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatPacketReceivedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatPacketReceivedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatPacketReceived", m_StatPacketReceivedFeature);
		if (result != VmbErrorSuccess) {
			m_StatPacketReceivedFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketReceivedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatPacketRequested(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketRequestedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatPacketRequestedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatPacketRequestedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatPacketRequested", m_StatPacketRequestedFeature);
		if (result != VmbErrorSuccess) {
			m_StatPacketRequestedFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketRequestedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatPacketResent(VmbInt64_t& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketResentFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatPacketResentFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatPacketResentFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatPacketResent", m_StatPacketResentFeature);
		if (result != VmbErrorSuccess) {
			m_StatPacketResentFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketResentFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStatTimeElapsed(double& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatTimeElapsedFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStatTimeElapsedFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StatTimeElapsedFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StatTimeElapsed", m_StatTimeElapsedFeature);
		if (result != VmbErrorSuccess) {
			m_StatTimeElapsedFeature.reset();
			return result;
		}
	}
	feature = m_StatTimeElapsedFeature;
	return VmbErrorSuccess;
}


// Category /StreamInformation
VmbErrorType GC2450MCamera::GetStreamID(std::string& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamIDFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue(value);
	return result;
}

VmbErrorType GC2450MCamera::GetStreamIDFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamIDFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamID", m_StreamIDFeature);
		if (result != VmbErrorSuccess) {
			m_StreamIDFeature.reset();
			return result;
		}
	}
	feature = m_StreamIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GC2450MCamera::GetStreamType(StreamTypeEnum& value) {
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamTypeFeature(pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue(nValue);
	value = (StreamTypeEnum)nValue;
	return result;
}

VmbErrorType GC2450MCamera::GetStreamTypeFeature(AVT::VmbAPI::FeaturePtr& feature) {
	if (m_StreamTypeFeature.get() == nullptr) {
		VmbErrorType result;
		result = GetFeatureByName("StreamType", m_StreamTypeFeature);
		if (result != VmbErrorSuccess) {
			m_StreamTypeFeature.reset();
			return result;
		}
	}
	feature = m_StreamTypeFeature;
	return VmbErrorSuccess;
}

